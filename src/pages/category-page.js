'use strict';

(function (window, document, undefined, paneiro, jambo) {
  var categoryPathMap = {};
  var categories = paneiro.config.categories;
  for (var i = 0, len = categories.length; i < len; ++i) {
    categoryPathMap[categories[i].path] = categories[i];
  }

  Polymer({
    is: 'category-page',

    properties: {
      cart: Object,
      categoryName: String,
      firstLoad: {
        type: Array,
        notify: true
      },
      hasNext: {
        type: Boolean,
        value: false
      },
      products: {
        type: Array,
        notify: true
      },
      page: Number,
      route: Object,
      selectedCategory: {
        type: String,
        notify: true
      }
    },

    observers: ['_routeCategoryChanged(routeData.category)'],

    _routeCategoryChanged: function _routeCategoryChanged(category) {
      if (this.firstLoad) {
        this.products = [];
      } else {
        paneiro.sharedElements.loadingProgress.classList.add('transiting');
        paneiro.sharedElements.loadingProgress.value = 85;
      }

      category = category || 'petshop';

      var categoryData = categoryPathMap[category];

      this.hasNext = false;
      this.selectedCategory = category;
      this.page = 1;
      this.categoryName = categoryData.name;
      this._loadCategoryProducts(categoryData.id, this.page);
    },

    _loadCategoryProducts: function _loadCategoryProducts(categoryId, page) {
      var _this = this;

      paneiro.api.product.get({
        category: categoryId,
        page: page
      }).then(function (response) {
        if (page === 1) {
          _this.products = response.data;
          _this.products.forEach(function (product) {
            product.qty = 1;
          });
          window.scrollTo(0, 0);
        } else {
          response.data.forEach(function (product) {
            product.qty = 1;
            _this.push('products', product);
          });
        }

        _this.hasNext = response.paging !== undefined && response.paging.next !== undefined;

        if (!_this.firstLoad) {
          paneiro.sharedElements.loadingProgress.value = 100;
          paneiro.sharedElements.loadingProgress.classList.remove('transiting');

          setTimeout(function () {
            paneiro.sharedElements.loadingProgress.value = 0;
          }, 300);
        }

        _this.firstLoad = false;
      });
    },

    onIncQtyTap: function onIncQtyTap(e) {
      if (e.model.product.qty < 9) {
        e.model.set('product.qty', e.model.product.qty + 1);
      }
    },

    onDecQtyTap: function onDecQtyTap(e) {
      if (e.model.product.qty > 0) {
        e.model.set('product.qty', e.model.product.qty - 1);
      }
    },

    onAddToCartTap: function onAddToCartTap(e) {
      var _this2 = this;

      var product = e.model.product;

      var qty = product.qty;
      var price = product.price;

      paneiro.api.cart.addProduct({
        id: product.id,
        qty: product.qty
      }).then(function (response) {
        _this2.$.addedToCartToast.open();

        var idx = _this2.cart.items.findIndex(function (element, index, array) {
          return element.id === product.id;
        });

        if (idx > -1) {
          _this2.set('cart.items.' + idx + '.qty', _this2.cart.items[idx].qty + qty);
        } else {
          var p = jambo.deepExtend({}, product);
          p.qty = qty;

          _this2.push('cart.items', p);
        }

        _this2.set('cart.total', _this2.cart.total + qty * product.price);
      }).catch(function (err) {
        return console.log(err);
      });

      e.model.set('product.qty', 0);
    },

    onLoadMoreTap: function onLoadMoreTap() {
      this.page++;

      var categoryData = categoryPathMap[this.selectedCategory];
      this._loadCategoryProducts(categoryData.id, this.page);

      if (!this.firstLoad) {
        paneiro.sharedElements.loadingProgress.classList.add('transiting');
        paneiro.sharedElements.loadingProgress.value = 85;
      }
    }
  });
})(window, document, undefined, paneiro, jambo);
//# sourceMappingURL=data:application/json;base64,
