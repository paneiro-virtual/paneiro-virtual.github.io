'use strict';

Polymer({
  is: 'cpf-validator',

  behaviors: [Polymer.IronValidatorBehavior],

  validate: function validate(cpf) {
    // code added to remove special characters and block cpfs with all
    // digits equal
    var cleanCpf = '';
    var buff = cpf.charAt(0);
    var allEqual = true;
    for (var i = 0, len = cpf.length; i < len; ++i) {
      if (!isNaN(cpf.charAt(i))) {
        cleanCpf += cpf.charAt(i);

        if (allEqual) {
          allEqual = allEqual && buff === cpf.charAt(i);
        }
      }
    }
    cpf = cleanCpf;

    if (allEqual) {
      return false;
    }

    //
    // code from receita federal site
    //
    var Soma;
    var Resto;
    Soma = 0;

    //cpf  = RetiraCaracteresInvalidos(cpf,11);
    if (cpf == '00000000000') {
      return false;
    }

    for (i = 1; i <= 9; i++) {
      Soma = Soma + parseInt(cpf.substring(i - 1, i)) * (11 - i);
    }
    Resto = Soma * 10 % 11;
    if (Resto == 10 || Resto == 11) {
      Resto = 0;
    }
    if (Resto != parseInt(cpf.substring(9, 10))) {
      return false;
    }
    Soma = 0;
    for (i = 1; i <= 10; i++) {
      Soma = Soma + parseInt(cpf.substring(i - 1, i)) * (12 - i);
    }
    Resto = Soma * 10 % 11;
    if (Resto == 10 || Resto == 11) {
      Resto = 0;
    }
    if (Resto != parseInt(cpf.substring(10, 11))) {
      return false;
    }
    return true;
  }
});

Polymer({
  is: 'cpf-input',

  properties: {
    autoValidate: Boolean,
    errorMessage: String,
    label: String,
    name: String,
    value: String,
    required: Boolean,
    disabled: Boolean
  },

  change: function change(e) {
    var str = e.target.value;
    var outStr = '';

    for (var i = 0, len = str.length; i < len && i < 14; ++i) {
      if (i === 3 || i === 7) {
        outStr += '.';
      } else if (i === 11) {
        outStr += '-';
      }

      if (!isNaN(str.charAt(i))) {
        outStr += str.charAt(i);
      }
    }

    e.target.value = outStr;
    e.target.validate();
  }
});
//# sourceMappingURL=data:application/json;base64,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QUksTUFBTSxFQUFWLEVBQWM7QUFDbkIsa0JBQVUsR0FBVjtBQUNEOztBQUVELFVBQUksQ0FBQyxNQUFNLElBQUksTUFBSixDQUFXLENBQVgsQ0FBTixDQUFMLEVBQTJCO0FBQ3pCLGtCQUFVLElBQUksTUFBSixDQUFXLENBQVgsQ0FBVjtBQUNEO0FBQ0Y7O0FBRUQsTUFBRSxNQUFGLENBQVMsS0FBVCxHQUFpQixNQUFqQjtBQUNBLE1BQUUsTUFBRixDQUFTLFFBQVQ7QUFDRDtBQS9CSyxDQUFSIiwiZmlsZSI6ImVsZW1lbnRzL2NwZi1pbnB1dC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlBvbHltZXIoe1xuICAgICAgaXM6ICdjcGYtdmFsaWRhdG9yJyxcblxuICAgICAgYmVoYXZpb3JzOiBbXG4gICAgICAgIFBvbHltZXIuSXJvblZhbGlkYXRvckJlaGF2aW9yXG4gICAgICBdLCAgICAgICAgICAgICAgICAgXG5cbiAgICAgIHZhbGlkYXRlOiBmdW5jdGlvbihjcGYpIHtcbiAgICAgICAgLy8gY29kZSBhZGRlZCB0byByZW1vdmUgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBibG9jayBjcGZzIHdpdGggYWxsXG4gICAgICAgIC8vIGRpZ2l0cyBlcXVhbFxuICAgICAgICB2YXIgY2xlYW5DcGYgPSAnJztcbiAgICAgICAgdmFyIGJ1ZmYgPSBjcGYuY2hhckF0KDApO1xuICAgICAgICB2YXIgYWxsRXF1YWwgPSB0cnVlO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY3BmLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgaWYgKCFpc05hTihjcGYuY2hhckF0KGkpKSkge1xuICAgICAgICAgICAgY2xlYW5DcGYgKz0gY3BmLmNoYXJBdChpKTtcblxuICAgICAgICAgICAgaWYgKGFsbEVxdWFsKSB7XG4gICAgICAgICAgICAgIGFsbEVxdWFsID0gYWxsRXF1YWwgJiYgYnVmZiA9PT0gY3BmLmNoYXJBdChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY3BmID0gY2xlYW5DcGY7XG5cbiAgICAgICAgaWYgKGFsbEVxdWFsKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gY29kZSBmcm9tIHJlY2VpdGEgZmVkZXJhbCBzaXRlXG4gICAgICAgIC8vXG4gICAgICAgIHZhciBTb21hO1xuICAgICAgICB2YXIgUmVzdG87XG4gICAgICAgIFNvbWEgPSAwO1xuXG4gICAgICAgIC8vY3BmICA9IFJldGlyYUNhcmFjdGVyZXNJbnZhbGlkb3MoY3BmLDExKTtcbiAgICAgICAgaWYgKGNwZiA9PSAnMDAwMDAwMDAwMDAnKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMTsgaSA8PSA5OyBpKyspIHtcbiAgICAgICAgICBTb21hID0gU29tYSArIHBhcnNlSW50KGNwZi5zdWJzdHJpbmcoaSAtIDEsIGkpKSAqICgxMSAtIGkpO1xuICAgICAgICB9XG4gICAgICAgIFJlc3RvID0gKFNvbWEgKiAxMCkgJSAxMTtcbiAgICAgICAgaWYgKChSZXN0byA9PSAxMCkgfHwgKFJlc3RvID09IDExKSkge1xuICAgICAgICAgIFJlc3RvID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoUmVzdG8gIT0gcGFyc2VJbnQoY3BmLnN1YnN0cmluZyg5LCAxMCkpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIFNvbWEgPSAwO1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDw9IDEwOyBpKyspIHtcbiAgICAgICAgICBTb21hID0gU29tYSArIHBhcnNlSW50KGNwZi5zdWJzdHJpbmcoaSAtIDEsIGkpKSAqICgxMiAtIGkpO1xuICAgICAgICB9XG4gICAgICAgIFJlc3RvID0gKFNvbWEgKiAxMCkgJSAxMTtcbiAgICAgICAgaWYgKChSZXN0byA9PSAxMCkgfHwgKFJlc3RvID09IDExKSkgIHtcbiAgICAgICAgICBSZXN0byA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFJlc3RvICE9IHBhcnNlSW50KGNwZi5zdWJzdHJpbmcoMTAsIDExKSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBQb2x5bWVyKHtcbiAgICAgIGlzOiAnY3BmLWlucHV0JyxcblxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICBhdXRvVmFsaWRhdGU6IEJvb2xlYW4sXG4gICAgICAgIGVycm9yTWVzc2FnZTogU3RyaW5nLFxuICAgICAgICBsYWJlbDogU3RyaW5nLFxuICAgICAgICBuYW1lOiBTdHJpbmcsXG4gICAgICAgIHZhbHVlOiBTdHJpbmcsXG4gICAgICAgIHJlcXVpcmVkOiBCb29sZWFuLFxuICAgICAgICBkaXNhYmxlZDogQm9vbGVhbiAgICAgICAgXG4gICAgICB9LFxuXG4gICAgICBjaGFuZ2U6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHN0ciA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICB2YXIgb3V0U3RyID0gJyc7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHN0ci5sZW5ndGg7IGkgPCBsZW4gJiYgaSA8IDE0OyArK2kpIHtcbiAgICAgICAgICBpZiAoaSA9PT0gMyB8fCBpID09PSA3KSB7XG4gICAgICAgICAgICBvdXRTdHIgKz0gJy4nO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMTEpIHtcbiAgICAgICAgICAgIG91dFN0ciArPSAnLSc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFpc05hTihzdHIuY2hhckF0KGkpKSkge1xuICAgICAgICAgICAgb3V0U3RyICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZS50YXJnZXQudmFsdWUgPSBvdXRTdHI7ICAgICAgICBcbiAgICAgICAgZS50YXJnZXQudmFsaWRhdGUoKTtcbiAgICAgIH0gICAgICBcbiAgICB9KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
