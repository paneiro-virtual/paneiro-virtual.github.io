"use strict";var $export=require("./_export"),$typed=require("./_typed"),buffer=require("./_typed-buffer"),anObject=require("./_an-object"),toIndex=require("./_to-index"),toLength=require("./_to-length"),isObject=require("./_is-object"),ArrayBuffer=require("./_global").ArrayBuffer,speciesConstructor=require("./_species-constructor"),$ArrayBuffer=buffer.ArrayBuffer,$DataView=buffer.DataView,$isView=$typed.ABV&&ArrayBuffer.isView,$slice=$ArrayBuffer.prototype.slice,VIEW=$typed.VIEW,ARRAY_BUFFER="ArrayBuffer";$export($export.G+$export.W+$export.F*(ArrayBuffer!==$ArrayBuffer),{ArrayBuffer:$ArrayBuffer}),$export($export.S+$export.F*!$typed.CONSTR,ARRAY_BUFFER,{isView:function(e){return $isView&&$isView(e)||isObject(e)&&VIEW in e}}),$export($export.P+$export.U+$export.F*require("./_fails")(function(){return!new $ArrayBuffer(2).slice(1,void 0).byteLength}),ARRAY_BUFFER,{slice:function(e,r){if(void 0!==$slice&&void 0===r)return $slice.call(anObject(this),e);for(var t=anObject(this).byteLength,i=toIndex(e,t),f=toIndex(void 0===r?t:r,t),o=new(speciesConstructor(this,$ArrayBuffer))(toLength(f-i)),u=new $DataView(this),s=new $DataView(o),n=0;i<f;)s.setUint8(n++,u.getUint8(i++));return o}}),require("./_set-species")(ARRAY_BUFFER);